{
	"info": {
		"_postman_id": "4f2494e1-451e-4fa7-8a37-5264a479efb5",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Проверить, что в body приходит правильный string.",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"var jsonResp = pm.response.json();",
							"",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками)",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonResp.name).to.eql(\"Vasya\");",
							"});",
							"",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками)",
							"pm.test(\"Your test age\", function () {",
							"    pm.expect(jsonResp.age).to.eql(\"30\");",
							"});",
							"",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"",
							"pm.test(\"Your test salary\", function () {",
							"    pm.expect(jsonResp.salary).to.eql(1000);",
							"});",
							"",
							"// 7. Спарсить request.",
							"var jsonReq = request.data;",
							"",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request)",
							"pm.test(\"Response name equals request name\", function () {",
							"    pm.expect(jsonResp.name).to.eql(jsonReq.name);",
							"});",
							"",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request)",
							"pm.test(\"Response age equals request age\", function () {",
							"    pm.expect(jsonResp.age).to.eql(jsonReq.age);",
							"});",
							"",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request)",
							"pm.test(\"Response salary equals request salary\", function () {",
							"    pm.expect(String(jsonResp.salary)).to.eql(jsonReq.salary);",
							"});",
							"",
							"// 11. Вывести в консоль параметр family из response.",
							"console.log(\"family: \", jsonResp.family)",
							"",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"Response u_salary_1_5_year equals request salary*4\", function () {",
							"    pm.expect(jsonResp.family.u_salary_1_5_year).to.eql(jsonReq.salary*4);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vasya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"var jsonResp = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"var jsonReq = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Response name equals request name\", function () {",
							"    pm.expect(jsonResp.name).to.eql(jsonReq.name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Response age equals request age\", function () {",
							"    pm.expect(jsonResp.age).to.eql(jsonReq.age);",
							"});",
							"",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Response salary equals request salary\", function () {",
							"    pm.expect(String(jsonResp.salary)).to.eql(jsonReq.salary);",
							"});",
							"",
							"// 8. Вывести в консоль параметр family из response.",
							"console.log(\"family: \", jsonResp.family)",
							"",
							"// 9. Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Dog has a name\", function () {",
							"    pm.expect(jsonResp.family.pets.dog).to.have.property('name');",
							"});",
							"",
							"// 10. Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Dog has an age\", function () {",
							"    pm.expect(jsonResp.family.pets.dog).to.have.property('age');",
							"});",
							"",
							"// 11. Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Dog's name is Luky\", function () {",
							"    pm.expect(jsonResp.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"",
							"// 12. Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Dog's age is 4\", function () {",
							"    pm.expect(jsonResp.family.pets.dog.age).to.eql(4);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Vasya&age=30&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vasya"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"var jsonResp = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"var jsonReq = pm.request.url.query.toObject();",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Response name equals request name\", function () {",
							"    pm.expect(jsonResp.name).to.eql(jsonReq.name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"",
							"pm.test(\"Response age equals request age\", function () {",
							"    pm.expect(String(jsonResp.age)).to.eql(jsonReq.age);",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"console.log(\"salary:\", jsonReq.salary)",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"console.log(\"salary:\", jsonResp.salary)",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"console.log(\"min_salary:\", jsonResp.salary[0])",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"console.log(\"mid_salary:\", jsonResp.salary[1])",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"console.log(\"max_salary:\", jsonResp.salary[2])",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"pm.test(\"min_salary equals request salary\", function () {",
							"    pm.expect(String(jsonResp.salary[0])).to.eql(jsonReq.salary);",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"mid_salary equals request salary*2\", function () {",
							"    pm.expect(jsonResp.salary[1]).to.eql(String(jsonReq.salary * 2));",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"max_salary equals request salary*3\", function () {",
							"    pm.expect(jsonResp.salary[2]).to.eql(String(jsonReq.salary * 3));",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"// 16. Создать в окружении переменную age",
							"// 17. Создать в окружении переменную salary",
							"// 18. Передать в окружение переменную name",
							"pm.environment.set(\"name\", jsonResp.name);",
							"",
							"// 19. Передать в окружение переменную age",
							"pm.environment.set(\"age\", jsonResp.age);",
							"",
							"// 20. Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", jsonResp.salary[0]);",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							"var i = 0;",
							"while (i < 3) {",
							"  console.log(jsonResp.salary[i]);",
							"  i++;",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Vasya&age=30&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Vasya"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request",
							"// 2. Вставить параметр age из окружения в age",
							"// 3. Вставить параметр name из окружения в name",
							"// 4. Отправить запрос.",
							"// 5. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 6. Спарсить response body в json.",
							"var jsonResp = pm.response.json();",
							"",
							"// 7. Спарсить request.",
							"",
							"var jsonReq = request.data;",
							"",
							"// 8. Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Response has a start_qa_salary\", function () {",
							"    pm.expect(jsonResp).to.have.property('start_qa_salary');",
							"});",
							"",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Response has a qa_salary_after_6_months\", function () {",
							"    pm.expect(jsonResp).to.have.property('qa_salary_after_6_months');",
							"});",
							"",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"",
							"pm.test(\"Response has a qa_salary_after_12_months\", function () {",
							"    pm.expect(jsonResp).to.have.property('qa_salary_after_12_months');",
							"});",
							"",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Response has a qa_salary_after_1.5_year\", function () {",
							"    pm.expect(jsonResp).to.have.property('qa_salary_after_1.5_year');",
							"});",
							"",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"",
							"pm.test(\"Response has a qa_salary_after_3.5_years\", function () {",
							"    pm.expect(jsonResp).to.have.property('qa_salary_after_3.5_years');",
							"});",
							"",
							"// 13. Проверить, что json response имеет параметр person",
							"pm.test(\"Response has a person\", function () {",
							"    pm.expect(jsonResp).to.have.property('person');",
							"});",
							"",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Response start_qa_salary equals request salary\",function () {",
							"    pm.expect(jsonResp.start_qa_salary).to.eql(Number(jsonReq.salary));",
							"});",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Response qa_salary_after_6_months equals request salary*2\",function () {",
							"    pm.expect(jsonResp.start_qa_salary).to.eql(+(jsonReq.salary));",
							"});",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Response qa_salary_after_12_months equals request salary*2.7\",function () {",
							"    pm.expect(jsonResp.qa_salary_after_12_months).to.eql(+(jsonReq.salary * 2.7));",
							"});",
							"",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Response qa_salary_after_1.5_year equals request salary*3.3\",function () {",
							"    pm.expect(jsonResp['qa_salary_after_1.5_year']).to.eql(+(jsonReq.salary * 3.3));",
							"});",
							"",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Response qa_salary_after_3.5_years equals request salary*3.8\",function () {",
							"    pm.expect(jsonResp['qa_salary_after_3.5_years']).to.eql(+(jsonReq.salary * 3.8));",
							"});",
							"",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Person's first element of u_name equals request salary\",function () {",
							"    pm.expect(jsonResp.person.u_name[1]).to.eql(+(jsonReq.salary));",
							"});",
							"",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Response u_age name equals request age\",function () {",
							"    pm.expect(jsonResp.person.u_age).to.eql(+(jsonReq.age));",
							"});",
							"",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Response u_salary_5_years name equals request salary*4.2\",function () {",
							"    pm.expect(jsonResp.person.u_salary_5_years).to.eql(jsonReq.salary * 4.2);",
							"});",
							"",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"for (var prop in jsonResp.person) {",
							"    console.log(prop + \": \" + jsonResp.person[prop]);",
							"};",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}